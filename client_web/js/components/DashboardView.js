// import React, { useState, useEffect } from 'react'; // Supprim√©

const DashboardView = ({ agents, error, onRefresh }) => {
    const activeAgents = agents.filter(agent => agent.status === 'ACTIVE');
    const inactiveAgents = agents.filter(agent => agent.status !== 'ACTIVE');
    const totalAgents = agents.length;

    const osTypes = agents.reduce((acc, agent) => {
        const os = agent.os_target || "Inconnu";
        acc[os] = (acc[os] || 0) + 1;
        return acc;
    }, {});

    // Donn√©es fictives pour nouvelles cartes
    const tasksInProgress = 5;
    const tasksCompleted = 22;
    const criticalVulnerabilities = 3;
    const recentActivities = [
        { id: 1, time: "10:45", text: "Agent WORKSTATION-05 check-in." },
        { id: 2, time: "10:42", text: "Scan de vuln√©rabilit√©s lanc√© sur SRV-DC01." },
        { id: 3, time: "10:30", text: "Nouvel agent ADMIN-PC enregistr√©." },
    ];

    const InfoTooltip = ({ text }) => (
        React.createElement('span', { className: "info-tooltip", title: text }, '‚ìò')
    );

    return (
        React.createElement('div', null,
            React.createElement('div', { style: { display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' } },
                React.createElement('h1', null, 'Tableau de Bord'),
                React.createElement('button', { onClick: onRefresh, style: { height: 'fit-content' } },
                    React.createElement('span', { role: "img", "aria-label": "refresh" }, 'üîÑ'),
                    ' Rafra√Æchir les Donn√©es'
                )
            ),
            
            error && React.createElement('p', { className: "error-message" }, error),

            // Section Bienvenue et Aide
            React.createElement('div', { className: "dashboard-card help-card", style: { marginBottom: '20px' } },
                React.createElement('h2', null, 'Bienvenue sur AD Penetrator Web UI!'),
                React.createElement('p', null, 'Cette interface vous permet de visualiser et d\'interagir avec vos agents d√©ploy√©s et les donn√©es Active Directory collect√©es.'),
                React.createElement('ul', null,
                    React.createElement('li', null, React.createElement('strong', null, 'Dashboard:'), ' Vue d\'ensemble de l\'√©tat du syst√®me et des agents.'),
                    React.createElement('li', null, React.createElement('strong', null, 'Agents:'), ' Liste d√©taill√©e de tous les agents, leur statut et informations.'),
                    React.createElement('li', null, React.createElement('strong', null, 'Graphe AD:'), ' Visualisation interactive des relations et objets AD (donn√©es fictives actuellement).')
                ),
                React.createElement('p', null, 'Utilisez la navigation en haut pour changer de vue. Les donn√©es du graphe AD sont pour l\'instant simul√©es.')
            ),
            
            React.createElement('div', { className: "dashboard-grid" },
                React.createElement('div', { className: "dashboard-card" },
                    React.createElement('h2', null, 
                        React.createElement('span', { className: "status-icon status-active" }), 
                        'Agents Actifs ', 
                        React.createElement(InfoTooltip, { text: "Agents actuellement connect√©s et envoyant des beacons." })
                    ),
                    React.createElement('p', null, React.createElement('span', { className: "stat-value" }, activeAgents.length))
                ),
                React.createElement('div', { className: "dashboard-card" },
                    React.createElement('h2', null, 
                        React.createElement('span', { className: "status-icon status-inactive" }), 
                        'Agents Inactifs/Autres ', 
                        React.createElement(InfoTooltip, { text: "Agents enregistr√©s mais non connect√©s r√©cemment." })
                    ),
                    React.createElement('p', null, React.createElement('span', { className: "stat-value" }, inactiveAgents.length))
                ),
                React.createElement('div', { className: "dashboard-card" },
                    React.createElement('h2', null, 
                        React.createElement('span', { className: "status-icon status-unknown" }), 
                        'Total Agents ', 
                        React.createElement(InfoTooltip, { text: "Nombre total d'agents uniques enregistr√©s." })
                    ),
                    React.createElement('p', null, React.createElement('span', { className: "stat-value" }, totalAgents))
                ),
                React.createElement('div', { className: "dashboard-card" },
                    React.createElement('h2', null, 
                        React.createElement('span', { role: "img", "aria-label": "server" }, 'üì°'), 
                        ' √âtat Serveur C2 ', 
                        React.createElement(InfoTooltip, { text: `Statut de la connexion √† l'API du C2: ${C2_SERVER_URL}` })
                    ),
                    error && !agents.length ? 
                        React.createElement('p', { className: "status-text error" }, "NON CONNECT√â") : 
                        React.createElement('p', { className: "status-text success" }, "CONNECT√â"),
                    React.createElement('p', { style: { fontSize: '0.8em', color: '#aaa', textAlign: 'center' } }, C2_SERVER_URL)
                ),

                totalAgents > 0 && (
                    React.createElement('div', { className: "dashboard-card large-card" }, 
                        React.createElement('h2', null, 
                            React.createElement('span', { role: "img", "aria-label": "os" }, 'üíª'), 
                            ' R√©partition des OS Agents'
                        ),
                        Object.keys(osTypes).length > 0 ? (
                            React.createElement('ul', { className: "os-list" },
                                Object.entries(osTypes).map(([os, count]) => (
                                    React.createElement('li', { key: os },
                                        React.createElement('span', null, os, ": "), 
                                        React.createElement('strong', null, count)
                                    )
                                ))
                            )
                        ) : (
                            React.createElement('p', null, "Aucune information d'OS disponible.")
                        )
                    )
                ),

                React.createElement('div', { className: "dashboard-card" },
                    React.createElement('h2', null, 
                        React.createElement('span', { role: "img", "aria-label": "tasks" }, 'üìä'), 
                        ' T√¢ches ', 
                        React.createElement(InfoTooltip, { text: "Statut des t√¢ches assign√©es aux agents (fictif)." })
                    ),
                    React.createElement('p', null, 'En cours: ', React.createElement('strong', { style: { color: '#61dafb' } }, tasksInProgress)),
                    React.createElement('p', null, 'Termin√©es: ', React.createElement('strong', { style: { color: '#8bc34a' } }, tasksCompleted)),
                    React.createElement('button', { style: { marginTop: '10px', fontSize: '0.9em', width: '100%' }, onClick: () => alert('Page de gestion des t√¢ches (√† venir)') }, 'Voir les T√¢ches')
                ),

                React.createElement('div', { className: "dashboard-card" },
                    React.createElement('h2', null, 
                        React.createElement('span', { role: "img", "aria-label": "vuln" }, '‚ö†Ô∏è'), 
                        ' Vuln√©rabilit√©s Critiques ', 
                        React.createElement(InfoTooltip, { text: "Nombre de vuln√©rabilit√©s critiques identifi√©es (fictif)." })
                    ),
                    React.createElement('p', null, React.createElement('span', { className: "stat-value alert" }, criticalVulnerabilities)),
                    React.createElement('button', { style: { marginTop: '10px', fontSize: '0.9em', width: '100%' }, onClick: () => alert('Page des vuln√©rabilit√©s (√† venir)') }, 'Analyser Vuln√©rabilit√©s')
                ),
                
                React.createElement('div', { className: "dashboard-card large-card" },
                    React.createElement('h2', null, 
                        React.createElement('span', { role: "img", "aria-label": "logs" }, 'üìã'), 
                        ' Activit√©s R√©centes ', 
                        React.createElement(InfoTooltip, { text: "Log simplifi√© des derni√®res actions importantes (fictif)." })
                    ),
                    React.createElement('ul', { className: "activity-log" },
                        recentActivities.map(activity => (
                            React.createElement('li', { key: activity.id },
                                React.createElement('span', { className: "log-time" }, activity.time),
                                React.createElement('span', { className: "log-text" }, activity.text)
                            )
                        ))
                    )
                )
            )
        )
    );
};

// export default DashboardView; // Supprim√© 